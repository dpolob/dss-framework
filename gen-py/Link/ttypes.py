#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class StatusEnum(object):
    STARTED = 1
    STOPPED = 2

    _VALUES_TO_NAMES = {
        1: "STARTED",
        2: "STOPPED",
    }

    _NAMES_TO_VALUES = {
        "STARTED": 1,
        "STOPPED": 2,
    }


class ReplyEnum(object):
    OK = 1
    ERROR = 2

    _VALUES_TO_NAMES = {
        1: "OK",
        2: "ERROR",
    }

    _NAMES_TO_VALUES = {
        "OK": 1,
        "ERROR": 2,
    }


class AlgorithmStruct(object):
    """
    Attributes:
     - algorithm_name
     - id
     - description
     - status
     - url_api
     - url_web

    """


    def __init__(self, algorithm_name=None, id=None, description=None, status=None, url_api=None, url_web=None,):
        self.algorithm_name = algorithm_name
        self.id = id
        self.description = description
        self.status = status
        self.url_api = url_api
        self.url_web = url_web

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.algorithm_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.url_api = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.url_web = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AlgorithmStruct')
        if self.algorithm_name is not None:
            oprot.writeFieldBegin('algorithm_name', TType.STRING, 1)
            oprot.writeString(self.algorithm_name.encode('utf-8') if sys.version_info[0] == 2 else self.algorithm_name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.url_api is not None:
            oprot.writeFieldBegin('url_api', TType.STRING, 5)
            oprot.writeString(self.url_api.encode('utf-8') if sys.version_info[0] == 2 else self.url_api)
            oprot.writeFieldEnd()
        if self.url_web is not None:
            oprot.writeFieldBegin('url_web', TType.STRING, 6)
            oprot.writeString(self.url_web.encode('utf-8') if sys.version_info[0] == 2 else self.url_web)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AlgorithmStruct)
AlgorithmStruct.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'algorithm_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'url_api', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'url_web', 'UTF8', None, ),  # 6
)
fix_spec(all_structs)
del all_structs
