#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def stateVectorUpdate(self, requestId, stateVector):
        """
        Parameters:
         - requestId
         - stateVector

        """
        pass

    def sensorDataUpdate(self, requestId, sensorData):
        """
        Parameters:
         - requestId
         - sensorData

        """
        pass

    def sendPlan(self, requestId, plan):
        """
        Parameters:
         - requestId
         - plan

        """
        pass

    def sendError(self, requestId, errorId, errorMessage):
        """
        Parameters:
         - requestId
         - errorId
         - errorMessage

        """
        pass

    def sendAlarm(self, requestId, missionId, alarm):
        """
        Parameters:
         - requestId
         - missionId
         - alarm

        """
        pass

    def sendMessage(self, requestId, senderId, message):
        """
        Parameters:
         - requestId
         - senderId
         - message

        """
        pass

    def sendMissionStatusReport(self, requestId, missionId, status):
        """
        Parameters:
         - requestId
         - missionId
         - status

        """
        pass

    def sendTaskStatusReport(self, requestId, missionId, taskId, status):
        """
        Parameters:
         - requestId
         - missionId
         - taskId
         - status

        """
        pass

    def sendCommandStatusReport(self, requestId, missionId, commandId, status):
        """
        Parameters:
         - requestId
         - missionId
         - commandId
         - status

        """
        pass

    def sendDssResultNumber(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        pass

    def sendDssResultBoolean(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        pass

    def sendDssResultString(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        pass

    def sendDssResultPosition(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        pass

    def ping(self):
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def stateVectorUpdate(self, requestId, stateVector):
        """
        Parameters:
         - requestId
         - stateVector

        """
        self.send_stateVectorUpdate(requestId, stateVector)

    def send_stateVectorUpdate(self, requestId, stateVector):
        self._oprot.writeMessageBegin('stateVectorUpdate', TMessageType.ONEWAY, self._seqid)
        args = stateVectorUpdate_args()
        args.requestId = requestId
        args.stateVector = stateVector
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sensorDataUpdate(self, requestId, sensorData):
        """
        Parameters:
         - requestId
         - sensorData

        """
        self.send_sensorDataUpdate(requestId, sensorData)

    def send_sensorDataUpdate(self, requestId, sensorData):
        self._oprot.writeMessageBegin('sensorDataUpdate', TMessageType.ONEWAY, self._seqid)
        args = sensorDataUpdate_args()
        args.requestId = requestId
        args.sensorData = sensorData
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendPlan(self, requestId, plan):
        """
        Parameters:
         - requestId
         - plan

        """
        self.send_sendPlan(requestId, plan)

    def send_sendPlan(self, requestId, plan):
        self._oprot.writeMessageBegin('sendPlan', TMessageType.ONEWAY, self._seqid)
        args = sendPlan_args()
        args.requestId = requestId
        args.plan = plan
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendError(self, requestId, errorId, errorMessage):
        """
        Parameters:
         - requestId
         - errorId
         - errorMessage

        """
        self.send_sendError(requestId, errorId, errorMessage)

    def send_sendError(self, requestId, errorId, errorMessage):
        self._oprot.writeMessageBegin('sendError', TMessageType.ONEWAY, self._seqid)
        args = sendError_args()
        args.requestId = requestId
        args.errorId = errorId
        args.errorMessage = errorMessage
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendAlarm(self, requestId, missionId, alarm):
        """
        Parameters:
         - requestId
         - missionId
         - alarm

        """
        self.send_sendAlarm(requestId, missionId, alarm)

    def send_sendAlarm(self, requestId, missionId, alarm):
        self._oprot.writeMessageBegin('sendAlarm', TMessageType.ONEWAY, self._seqid)
        args = sendAlarm_args()
        args.requestId = requestId
        args.missionId = missionId
        args.alarm = alarm
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendMessage(self, requestId, senderId, message):
        """
        Parameters:
         - requestId
         - senderId
         - message

        """
        self.send_sendMessage(requestId, senderId, message)

    def send_sendMessage(self, requestId, senderId, message):
        self._oprot.writeMessageBegin('sendMessage', TMessageType.ONEWAY, self._seqid)
        args = sendMessage_args()
        args.requestId = requestId
        args.senderId = senderId
        args.message = message
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendMissionStatusReport(self, requestId, missionId, status):
        """
        Parameters:
         - requestId
         - missionId
         - status

        """
        self.send_sendMissionStatusReport(requestId, missionId, status)

    def send_sendMissionStatusReport(self, requestId, missionId, status):
        self._oprot.writeMessageBegin('sendMissionStatusReport', TMessageType.ONEWAY, self._seqid)
        args = sendMissionStatusReport_args()
        args.requestId = requestId
        args.missionId = missionId
        args.status = status
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendTaskStatusReport(self, requestId, missionId, taskId, status):
        """
        Parameters:
         - requestId
         - missionId
         - taskId
         - status

        """
        self.send_sendTaskStatusReport(requestId, missionId, taskId, status)

    def send_sendTaskStatusReport(self, requestId, missionId, taskId, status):
        self._oprot.writeMessageBegin('sendTaskStatusReport', TMessageType.ONEWAY, self._seqid)
        args = sendTaskStatusReport_args()
        args.requestId = requestId
        args.missionId = missionId
        args.taskId = taskId
        args.status = status
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendCommandStatusReport(self, requestId, missionId, commandId, status):
        """
        Parameters:
         - requestId
         - missionId
         - commandId
         - status

        """
        self.send_sendCommandStatusReport(requestId, missionId, commandId, status)

    def send_sendCommandStatusReport(self, requestId, missionId, commandId, status):
        self._oprot.writeMessageBegin('sendCommandStatusReport', TMessageType.ONEWAY, self._seqid)
        args = sendCommandStatusReport_args()
        args.requestId = requestId
        args.missionId = missionId
        args.commandId = commandId
        args.status = status
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendDssResultNumber(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        self.send_sendDssResultNumber(requestId, algorithmId, result)

    def send_sendDssResultNumber(self, requestId, algorithmId, result):
        self._oprot.writeMessageBegin('sendDssResultNumber', TMessageType.ONEWAY, self._seqid)
        args = sendDssResultNumber_args()
        args.requestId = requestId
        args.algorithmId = algorithmId
        args.result = result
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendDssResultBoolean(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        self.send_sendDssResultBoolean(requestId, algorithmId, result)

    def send_sendDssResultBoolean(self, requestId, algorithmId, result):
        self._oprot.writeMessageBegin('sendDssResultBoolean', TMessageType.ONEWAY, self._seqid)
        args = sendDssResultBoolean_args()
        args.requestId = requestId
        args.algorithmId = algorithmId
        args.result = result
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendDssResultString(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        self.send_sendDssResultString(requestId, algorithmId, result)

    def send_sendDssResultString(self, requestId, algorithmId, result):
        self._oprot.writeMessageBegin('sendDssResultString', TMessageType.ONEWAY, self._seqid)
        args = sendDssResultString_args()
        args.requestId = requestId
        args.algorithmId = algorithmId
        args.result = result
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def sendDssResultPosition(self, requestId, algorithmId, result):
        """
        Parameters:
         - requestId
         - algorithmId
         - result

        """
        self.send_sendDssResultPosition(requestId, algorithmId, result)

    def send_sendDssResultPosition(self, requestId, algorithmId, result):
        self._oprot.writeMessageBegin('sendDssResultPosition', TMessageType.ONEWAY, self._seqid)
        args = sendDssResultPosition_args()
        args.requestId = requestId
        args.algorithmId = algorithmId
        args.result = result
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def ping(self):
        self.send_ping()
        return self.recv_ping()

    def send_ping(self):
        self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
        args = ping_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ping(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ping_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["stateVectorUpdate"] = Processor.process_stateVectorUpdate
        self._processMap["sensorDataUpdate"] = Processor.process_sensorDataUpdate
        self._processMap["sendPlan"] = Processor.process_sendPlan
        self._processMap["sendError"] = Processor.process_sendError
        self._processMap["sendAlarm"] = Processor.process_sendAlarm
        self._processMap["sendMessage"] = Processor.process_sendMessage
        self._processMap["sendMissionStatusReport"] = Processor.process_sendMissionStatusReport
        self._processMap["sendTaskStatusReport"] = Processor.process_sendTaskStatusReport
        self._processMap["sendCommandStatusReport"] = Processor.process_sendCommandStatusReport
        self._processMap["sendDssResultNumber"] = Processor.process_sendDssResultNumber
        self._processMap["sendDssResultBoolean"] = Processor.process_sendDssResultBoolean
        self._processMap["sendDssResultString"] = Processor.process_sendDssResultString
        self._processMap["sendDssResultPosition"] = Processor.process_sendDssResultPosition
        self._processMap["ping"] = Processor.process_ping
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_stateVectorUpdate(self, seqid, iprot, oprot):
        args = stateVectorUpdate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.stateVectorUpdate(args.requestId, args.stateVector)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sensorDataUpdate(self, seqid, iprot, oprot):
        args = sensorDataUpdate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sensorDataUpdate(args.requestId, args.sensorData)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendPlan(self, seqid, iprot, oprot):
        args = sendPlan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendPlan(args.requestId, args.plan)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendError(self, seqid, iprot, oprot):
        args = sendError_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendError(args.requestId, args.errorId, args.errorMessage)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendAlarm(self, seqid, iprot, oprot):
        args = sendAlarm_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendAlarm(args.requestId, args.missionId, args.alarm)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendMessage(self, seqid, iprot, oprot):
        args = sendMessage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendMessage(args.requestId, args.senderId, args.message)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendMissionStatusReport(self, seqid, iprot, oprot):
        args = sendMissionStatusReport_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendMissionStatusReport(args.requestId, args.missionId, args.status)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendTaskStatusReport(self, seqid, iprot, oprot):
        args = sendTaskStatusReport_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendTaskStatusReport(args.requestId, args.missionId, args.taskId, args.status)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendCommandStatusReport(self, seqid, iprot, oprot):
        args = sendCommandStatusReport_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendCommandStatusReport(args.requestId, args.missionId, args.commandId, args.status)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendDssResultNumber(self, seqid, iprot, oprot):
        args = sendDssResultNumber_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendDssResultNumber(args.requestId, args.algorithmId, args.result)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendDssResultBoolean(self, seqid, iprot, oprot):
        args = sendDssResultBoolean_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendDssResultBoolean(args.requestId, args.algorithmId, args.result)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendDssResultString(self, seqid, iprot, oprot):
        args = sendDssResultString_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendDssResultString(args.requestId, args.algorithmId, args.result)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_sendDssResultPosition(self, seqid, iprot, oprot):
        args = sendDssResultPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.sendDssResultPosition(args.requestId, args.algorithmId, args.result)
        except TTransport.TTransportException:
            raise
        except Exception:
            logging.exception('Exception in oneway handler')

    def process_ping(self, seqid, iprot, oprot):
        args = ping_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ping_result()
        try:
            result.success = self._handler.ping()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ping", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class stateVectorUpdate_args(object):
    """
    Attributes:
     - requestId
     - stateVector

    """


    def __init__(self, requestId=None, stateVector=None,):
        self.requestId = requestId
        self.stateVector = stateVector

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.stateVector = AFC_Types.ttypes.StateVector()
                    self.stateVector.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stateVectorUpdate_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.stateVector is not None:
            oprot.writeFieldBegin('stateVector', TType.STRUCT, 2)
            self.stateVector.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stateVectorUpdate_args)
stateVectorUpdate_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.STRUCT, 'stateVector', [AFC_Types.ttypes.StateVector, None], None, ),  # 2
)


class sensorDataUpdate_args(object):
    """
    Attributes:
     - requestId
     - sensorData

    """


    def __init__(self, requestId=None, sensorData=None,):
        self.requestId = requestId
        self.sensorData = sensorData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.sensorData = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = AFC_Sensors.ttypes.SensorData()
                        _elem5.read(iprot)
                        self.sensorData.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sensorDataUpdate_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.sensorData is not None:
            oprot.writeFieldBegin('sensorData', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.sensorData))
            for iter6 in self.sensorData:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sensorDataUpdate_args)
sensorDataUpdate_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.LIST, 'sensorData', (TType.STRUCT, [AFC_Sensors.ttypes.SensorData, None], False), None, ),  # 2
)


class sendPlan_args(object):
    """
    Attributes:
     - requestId
     - plan

    """


    def __init__(self, requestId=None, plan=None,):
        self.requestId = requestId
        self.plan = plan

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.plan = AFC_Types.ttypes.Mission()
                    self.plan.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendPlan_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.plan is not None:
            oprot.writeFieldBegin('plan', TType.STRUCT, 2)
            self.plan.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendPlan_args)
sendPlan_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.STRUCT, 'plan', [AFC_Types.ttypes.Mission, None], None, ),  # 2
)


class sendError_args(object):
    """
    Attributes:
     - requestId
     - errorId
     - errorMessage

    """


    def __init__(self, requestId=None, errorId=None, errorMessage=None,):
        self.requestId = requestId
        self.errorId = errorId
        self.errorMessage = errorMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.errorId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendError_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.errorId is not None:
            oprot.writeFieldBegin('errorId', TType.I32, 2)
            oprot.writeI32(self.errorId)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 3)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendError_args)
sendError_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'errorId', None, None, ),  # 2
    (3, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 3
)


class sendAlarm_args(object):
    """
    Attributes:
     - requestId
     - missionId
     - alarm

    """


    def __init__(self, requestId=None, missionId=None, alarm=None,):
        self.requestId = requestId
        self.missionId = missionId
        self.alarm = alarm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.alarm = AFC_Types.ttypes.Alarm()
                    self.alarm.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendAlarm_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 2)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.alarm is not None:
            oprot.writeFieldBegin('alarm', TType.STRUCT, 3)
            self.alarm.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendAlarm_args)
sendAlarm_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'missionId', None, None, ),  # 2
    (3, TType.STRUCT, 'alarm', [AFC_Types.ttypes.Alarm, None], None, ),  # 3
)


class sendMessage_args(object):
    """
    Attributes:
     - requestId
     - senderId
     - message

    """


    def __init__(self, requestId=None, senderId=None, message=None,):
        self.requestId = requestId
        self.senderId = senderId
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.senderId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendMessage_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.senderId is not None:
            oprot.writeFieldBegin('senderId', TType.I32, 2)
            oprot.writeI32(self.senderId)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendMessage_args)
sendMessage_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'senderId', None, None, ),  # 2
    (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
)


class sendMissionStatusReport_args(object):
    """
    Attributes:
     - requestId
     - missionId
     - status

    """


    def __init__(self, requestId=None, missionId=None, status=None,):
        self.requestId = requestId
        self.missionId = missionId
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendMissionStatusReport_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 2)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendMissionStatusReport_args)
sendMissionStatusReport_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'missionId', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)


class sendTaskStatusReport_args(object):
    """
    Attributes:
     - requestId
     - missionId
     - taskId
     - status

    """


    def __init__(self, requestId=None, missionId=None, taskId=None, status=None,):
        self.requestId = requestId
        self.missionId = missionId
        self.taskId = taskId
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.taskId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendTaskStatusReport_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 2)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.I32, 3)
            oprot.writeI32(self.taskId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendTaskStatusReport_args)
sendTaskStatusReport_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'missionId', None, None, ),  # 2
    (3, TType.I32, 'taskId', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
)


class sendCommandStatusReport_args(object):
    """
    Attributes:
     - requestId
     - missionId
     - commandId
     - status

    """


    def __init__(self, requestId=None, missionId=None, commandId=None, status=None,):
        self.requestId = requestId
        self.missionId = missionId
        self.commandId = commandId
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.commandId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendCommandStatusReport_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 2)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.commandId is not None:
            oprot.writeFieldBegin('commandId', TType.I32, 3)
            oprot.writeI32(self.commandId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendCommandStatusReport_args)
sendCommandStatusReport_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'missionId', None, None, ),  # 2
    (3, TType.I32, 'commandId', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
)


class sendDssResultNumber_args(object):
    """
    Attributes:
     - requestId
     - algorithmId
     - result

    """


    def __init__(self, requestId=None, algorithmId=None, result=None,):
        self.requestId = requestId
        self.algorithmId = algorithmId
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.algorithmId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.result = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = AFC_DSS_Types.ttypes.ResponseNumber()
                        _elem12.read(iprot)
                        self.result.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendDssResultNumber_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.algorithmId is not None:
            oprot.writeFieldBegin('algorithmId', TType.I32, 2)
            oprot.writeI32(self.algorithmId)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.result))
            for iter13 in self.result:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendDssResultNumber_args)
sendDssResultNumber_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'algorithmId', None, None, ),  # 2
    (3, TType.LIST, 'result', (TType.STRUCT, [AFC_DSS_Types.ttypes.ResponseNumber, None], False), None, ),  # 3
)


class sendDssResultBoolean_args(object):
    """
    Attributes:
     - requestId
     - algorithmId
     - result

    """


    def __init__(self, requestId=None, algorithmId=None, result=None,):
        self.requestId = requestId
        self.algorithmId = algorithmId
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.algorithmId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.result = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = AFC_DSS_Types.ttypes.ResponseBoolean()
                        _elem19.read(iprot)
                        self.result.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendDssResultBoolean_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.algorithmId is not None:
            oprot.writeFieldBegin('algorithmId', TType.I32, 2)
            oprot.writeI32(self.algorithmId)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.result))
            for iter20 in self.result:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendDssResultBoolean_args)
sendDssResultBoolean_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'algorithmId', None, None, ),  # 2
    (3, TType.LIST, 'result', (TType.STRUCT, [AFC_DSS_Types.ttypes.ResponseBoolean, None], False), None, ),  # 3
)


class sendDssResultString_args(object):
    """
    Attributes:
     - requestId
     - algorithmId
     - result

    """


    def __init__(self, requestId=None, algorithmId=None, result=None,):
        self.requestId = requestId
        self.algorithmId = algorithmId
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.algorithmId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.result = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = AFC_DSS_Types.ttypes.ResponseString()
                        _elem26.read(iprot)
                        self.result.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendDssResultString_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.algorithmId is not None:
            oprot.writeFieldBegin('algorithmId', TType.I32, 2)
            oprot.writeI32(self.algorithmId)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.result))
            for iter27 in self.result:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendDssResultString_args)
sendDssResultString_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'algorithmId', None, None, ),  # 2
    (3, TType.LIST, 'result', (TType.STRUCT, [AFC_DSS_Types.ttypes.ResponseString, None], False), None, ),  # 3
)


class sendDssResultPosition_args(object):
    """
    Attributes:
     - requestId
     - algorithmId
     - result

    """


    def __init__(self, requestId=None, algorithmId=None, result=None,):
        self.requestId = requestId
        self.algorithmId = algorithmId
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.algorithmId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.result = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = AFC_DSS_Types.ttypes.ResponsePosition()
                        _elem33.read(iprot)
                        self.result.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendDssResultPosition_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.I32, 1)
            oprot.writeI32(self.requestId)
            oprot.writeFieldEnd()
        if self.algorithmId is not None:
            oprot.writeFieldBegin('algorithmId', TType.I32, 2)
            oprot.writeI32(self.algorithmId)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.result))
            for iter34 in self.result:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendDssResultPosition_args)
sendDssResultPosition_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestId', None, None, ),  # 1
    (2, TType.I32, 'algorithmId', None, None, ),  # 2
    (3, TType.LIST, 'result', (TType.STRUCT, [AFC_DSS_Types.ttypes.ResponsePosition, None], False), None, ),  # 3
)


class ping_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_args)
ping_args.thrift_spec = (
)


class ping_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_result)
ping_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)
fix_spec(all_structs)
del all_structs

