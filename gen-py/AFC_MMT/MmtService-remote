#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from AFC_MMT import MmtService
from AFC_MMT.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void stateVectorUpdate(i32 requestId, StateVector stateVector)')
    print('  void sensorDataUpdate(i32 requestId,  sensorData)')
    print('  void sendPlan(i32 requestId, Mission plan)')
    print('  void sendError(i32 requestId, i32 errorId, string errorMessage)')
    print('  void sendAlarm(i32 requestId, i32 missionId, Alarm alarm)')
    print('  void sendMessage(i32 requestId, i32 senderId, string message)')
    print('  void sendMissionStatusReport(i32 requestId, i32 missionId, TaskCommandStatus status)')
    print('  void sendTaskStatusReport(i32 requestId, i32 missionId, i32 taskId, TaskCommandStatus status)')
    print('  void sendCommandStatusReport(i32 requestId, i32 missionId, i32 commandId, TaskCommandStatus status)')
    print('  void sendDssResultNumber(i32 requestId, i32 algorithmId,  result)')
    print('  void sendDssResultBoolean(i32 requestId, i32 algorithmId,  result)')
    print('  void sendDssResultString(i32 requestId, i32 algorithmId,  result)')
    print('  void sendDssResultPosition(i32 requestId, i32 algorithmId,  result)')
    print('  string ping()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MmtService.Client(protocol)
transport.open()

if cmd == 'stateVectorUpdate':
    if len(args) != 2:
        print('stateVectorUpdate requires 2 args')
        sys.exit(1)
    pp.pprint(client.stateVectorUpdate(eval(args[0]), eval(args[1]),))

elif cmd == 'sensorDataUpdate':
    if len(args) != 2:
        print('sensorDataUpdate requires 2 args')
        sys.exit(1)
    pp.pprint(client.sensorDataUpdate(eval(args[0]), eval(args[1]),))

elif cmd == 'sendPlan':
    if len(args) != 2:
        print('sendPlan requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendPlan(eval(args[0]), eval(args[1]),))

elif cmd == 'sendError':
    if len(args) != 3:
        print('sendError requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendError(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'sendAlarm':
    if len(args) != 3:
        print('sendAlarm requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendAlarm(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sendMessage':
    if len(args) != 3:
        print('sendMessage requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendMessage(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'sendMissionStatusReport':
    if len(args) != 3:
        print('sendMissionStatusReport requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendMissionStatusReport(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sendTaskStatusReport':
    if len(args) != 4:
        print('sendTaskStatusReport requires 4 args')
        sys.exit(1)
    pp.pprint(client.sendTaskStatusReport(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sendCommandStatusReport':
    if len(args) != 4:
        print('sendCommandStatusReport requires 4 args')
        sys.exit(1)
    pp.pprint(client.sendCommandStatusReport(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sendDssResultNumber':
    if len(args) != 3:
        print('sendDssResultNumber requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendDssResultNumber(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sendDssResultBoolean':
    if len(args) != 3:
        print('sendDssResultBoolean requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendDssResultBoolean(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sendDssResultString':
    if len(args) != 3:
        print('sendDssResultString requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendDssResultString(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sendDssResultPosition':
    if len(args) != 3:
        print('sendDssResultPosition requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendDssResultPosition(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
