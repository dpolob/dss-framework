#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class VehicleType(object):
    AUAV = 0
    RUAV = 1
    AGV = 2
    RGV = 3
    UAV = 4
    UGV = 5
    Tractor = 6

    _VALUES_TO_NAMES = {
        0: "AUAV",
        1: "RUAV",
        2: "AGV",
        3: "RGV",
        4: "UAV",
        5: "UGV",
        6: "Tractor",
    }

    _NAMES_TO_VALUES = {
        "AUAV": 0,
        "RUAV": 1,
        "AGV": 2,
        "RGV": 3,
        "UAV": 4,
        "UGV": 5,
        "Tractor": 6,
    }


class TaskType(object):
    TRANSIT = 0
    SURVEY = 1
    INSPECT = 2
    HOTPOINT = 3
    FOLLOW_TARGET = 4
    ACTIVE_TRACK = 5
    PANORAMA = 6

    _VALUES_TO_NAMES = {
        0: "TRANSIT",
        1: "SURVEY",
        2: "INSPECT",
        3: "HOTPOINT",
        4: "FOLLOW_TARGET",
        5: "ACTIVE_TRACK",
        6: "PANORAMA",
    }

    _NAMES_TO_VALUES = {
        "TRANSIT": 0,
        "SURVEY": 1,
        "INSPECT": 2,
        "HOTPOINT": 3,
        "FOLLOW_TARGET": 4,
        "ACTIVE_TRACK": 5,
        "PANORAMA": 6,
    }


class CommandType(object):
    NAV_TAKEOFF = 0
    NAV_LAND = 1
    NAV_WAYPOINT = 2
    CAMERA_IMAGE = 3
    VIDEO_START_CAPTURE = 4
    VIDEO_STOP_CAPTURE = 5
    NAV_HOTPOINT = 6
    NAV_FOLLOW_TARGET = 7
    NAV_TRACK_SUBJECT = 8
    CAMERA_PANORAMA = 9
    NAV_HOME = 10

    _VALUES_TO_NAMES = {
        0: "NAV_TAKEOFF",
        1: "NAV_LAND",
        2: "NAV_WAYPOINT",
        3: "CAMERA_IMAGE",
        4: "VIDEO_START_CAPTURE",
        5: "VIDEO_STOP_CAPTURE",
        6: "NAV_HOTPOINT",
        7: "NAV_FOLLOW_TARGET",
        8: "NAV_TRACK_SUBJECT",
        9: "CAMERA_PANORAMA",
        10: "NAV_HOME",
    }

    _NAMES_TO_VALUES = {
        "NAV_TAKEOFF": 0,
        "NAV_LAND": 1,
        "NAV_WAYPOINT": 2,
        "CAMERA_IMAGE": 3,
        "VIDEO_START_CAPTURE": 4,
        "VIDEO_STOP_CAPTURE": 5,
        "NAV_HOTPOINT": 6,
        "NAV_FOLLOW_TARGET": 7,
        "NAV_TRACK_SUBJECT": 8,
        "CAMERA_PANORAMA": 9,
        "NAV_HOME": 10,
    }


class TaskCommandStatus(object):
    NotAssigned = 0
    NotStarted = 1
    Running = 2
    Finished = 3
    Stopped = 4

    _VALUES_TO_NAMES = {
        0: "NotAssigned",
        1: "NotStarted",
        2: "Running",
        3: "Finished",
        4: "Stopped",
    }

    _NAMES_TO_VALUES = {
        "NotAssigned": 0,
        "NotStarted": 1,
        "Running": 2,
        "Finished": 3,
        "Stopped": 4,
    }


class TaskRegionType(object):
    Point = 0
    Column = 1
    Area = 2
    Circle = 3
    Dynamic = 4

    _VALUES_TO_NAMES = {
        0: "Point",
        1: "Column",
        2: "Area",
        3: "Circle",
        4: "Dynamic",
    }

    _NAMES_TO_VALUES = {
        "Point": 0,
        "Column": 1,
        "Area": 2,
        "Circle": 3,
        "Dynamic": 4,
    }


class EquipmentType(object):
    CAMERA_360 = 0
    CAMERA_PHOTO = 1
    CAMERA_VIDEO = 2
    IR_CAMERA_PHOTO = 3
    IR_CAMERA_VIDEO = 4
    WIFI = 5
    COLLISION_AVOIDANCE = 6
    SPRAYER = 7

    _VALUES_TO_NAMES = {
        0: "CAMERA_360",
        1: "CAMERA_PHOTO",
        2: "CAMERA_VIDEO",
        3: "IR_CAMERA_PHOTO",
        4: "IR_CAMERA_VIDEO",
        5: "WIFI",
        6: "COLLISION_AVOIDANCE",
        7: "SPRAYER",
    }

    _NAMES_TO_VALUES = {
        "CAMERA_360": 0,
        "CAMERA_PHOTO": 1,
        "CAMERA_VIDEO": 2,
        "IR_CAMERA_PHOTO": 3,
        "IR_CAMERA_VIDEO": 4,
        "WIFI": 5,
        "COLLISION_AVOIDANCE": 6,
        "SPRAYER": 7,
    }


class Position(object):
    """
    Attributes:
     - longitude
     - latitude
     - altitude

    """


    def __init__(self, longitude=None, latitude=None, altitude=None,):
        self.longitude = longitude
        self.latitude = latitude
        self.altitude = altitude

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.altitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Position')
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.altitude is not None:
            oprot.writeFieldBegin('altitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.altitude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Orientation(object):
    """
    Attributes:
     - roll
     - pitch
     - yaw

    """


    def __init__(self, roll=None, pitch=None, yaw=None,):
        self.roll = roll
        self.pitch = pitch
        self.yaw = yaw

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.roll = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.pitch = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.yaw = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Orientation')
        if self.roll is not None:
            oprot.writeFieldBegin('roll', TType.DOUBLE, 1)
            oprot.writeDouble(self.roll)
            oprot.writeFieldEnd()
        if self.pitch is not None:
            oprot.writeFieldBegin('pitch', TType.DOUBLE, 2)
            oprot.writeDouble(self.pitch)
            oprot.writeFieldEnd()
        if self.yaw is not None:
            oprot.writeFieldBegin('yaw', TType.DOUBLE, 3)
            oprot.writeDouble(self.yaw)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Region(object):
    """
    Attributes:
     - area

    """


    def __init__(self, area=None,):
        self.area = area

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.area = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Position()
                        _elem5.read(iprot)
                        self.area.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Region')
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.area))
            for iter6 in self.area:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DetectionRegion(object):
    """
    Attributes:
     - Id
     - time
     - location
     - label

    """


    def __init__(self, Id=None, time=None, location=None, label=None,):
        self.Id = Id
        self.time = time
        self.location = location
        self.label = label

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.location = Region()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DetectionRegion')
        if self.Id is not None:
            oprot.writeFieldBegin('Id', TType.I32, 1)
            oprot.writeI32(self.Id)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 2)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 3)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 4)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Battery(object):
    """
    Attributes:
     - batteryCapacity
     - batteryPercentage

    """


    def __init__(self, batteryCapacity=None, batteryPercentage=None,):
        self.batteryCapacity = batteryCapacity
        self.batteryPercentage = batteryPercentage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.batteryCapacity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.batteryPercentage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Battery')
        if self.batteryCapacity is not None:
            oprot.writeFieldBegin('batteryCapacity', TType.DOUBLE, 1)
            oprot.writeDouble(self.batteryCapacity)
            oprot.writeFieldEnd()
        if self.batteryPercentage is not None:
            oprot.writeFieldBegin('batteryPercentage', TType.DOUBLE, 2)
            oprot.writeDouble(self.batteryPercentage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StateVector(object):
    """
    Attributes:
     - vehicleId
     - position
     - orientation
     - gimbalPitch
     - battery
     - linearSpeed
     - lastUpdate

    """


    def __init__(self, vehicleId=None, position=None, orientation=None, gimbalPitch=None, battery=None, linearSpeed=None, lastUpdate=None,):
        self.vehicleId = vehicleId
        self.position = position
        self.orientation = orientation
        self.gimbalPitch = gimbalPitch
        self.battery = battery
        self.linearSpeed = linearSpeed
        self.lastUpdate = lastUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vehicleId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.position = Position()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.orientation = Orientation()
                    self.orientation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.gimbalPitch = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.battery = Battery()
                    self.battery.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.linearSpeed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.lastUpdate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StateVector')
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.I32, 1)
            oprot.writeI32(self.vehicleId)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 2)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.orientation is not None:
            oprot.writeFieldBegin('orientation', TType.STRUCT, 3)
            self.orientation.write(oprot)
            oprot.writeFieldEnd()
        if self.gimbalPitch is not None:
            oprot.writeFieldBegin('gimbalPitch', TType.DOUBLE, 4)
            oprot.writeDouble(self.gimbalPitch)
            oprot.writeFieldEnd()
        if self.battery is not None:
            oprot.writeFieldBegin('battery', TType.STRUCT, 5)
            self.battery.write(oprot)
            oprot.writeFieldEnd()
        if self.linearSpeed is not None:
            oprot.writeFieldBegin('linearSpeed', TType.DOUBLE, 6)
            oprot.writeDouble(self.linearSpeed)
            oprot.writeFieldEnd()
        if self.lastUpdate is not None:
            oprot.writeFieldBegin('lastUpdate', TType.I64, 7)
            oprot.writeI64(self.lastUpdate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Equipment(object):
    """
    Attributes:
     - id
     - isoId
     - type
     - name

    """


    def __init__(self, id=None, isoId=None, type=None, name=None,):
        self.id = id
        self.isoId = isoId
        self.type = type
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.isoId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Equipment')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.isoId is not None:
            oprot.writeFieldBegin('isoId', TType.STRING, 2)
            oprot.writeString(self.isoId.encode('utf-8') if sys.version_info[0] == 2 else self.isoId)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Vehicle(object):
    """
    Attributes:
     - id
     - name
     - type
     - maxSpeed
     - maxRunningTime
     - equipments
     - capabilities
     - stateVector
     - safetyDistance

    """


    def __init__(self, id=None, name=None, type=None, maxSpeed=None, maxRunningTime=None, equipments=None, capabilities=None, stateVector=None, safetyDistance=None,):
        self.id = id
        self.name = name
        self.type = type
        self.maxSpeed = maxSpeed
        self.maxRunningTime = maxRunningTime
        self.equipments = equipments
        self.capabilities = capabilities
        self.stateVector = stateVector
        self.safetyDistance = safetyDistance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.maxSpeed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.maxRunningTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.equipments = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Equipment()
                        _elem12.read(iprot)
                        self.equipments.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.capabilities = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readI32()
                        self.capabilities.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.stateVector = StateVector()
                    self.stateVector.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.safetyDistance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Vehicle')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.maxSpeed is not None:
            oprot.writeFieldBegin('maxSpeed', TType.DOUBLE, 4)
            oprot.writeDouble(self.maxSpeed)
            oprot.writeFieldEnd()
        if self.maxRunningTime is not None:
            oprot.writeFieldBegin('maxRunningTime', TType.I32, 5)
            oprot.writeI32(self.maxRunningTime)
            oprot.writeFieldEnd()
        if self.equipments is not None:
            oprot.writeFieldBegin('equipments', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.equipments))
            for iter19 in self.equipments:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.capabilities is not None:
            oprot.writeFieldBegin('capabilities', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.capabilities))
            for iter20 in self.capabilities:
                oprot.writeI32(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stateVector is not None:
            oprot.writeFieldBegin('stateVector', TType.STRUCT, 8)
            self.stateVector.write(oprot)
            oprot.writeFieldEnd()
        if self.safetyDistance is not None:
            oprot.writeFieldBegin('safetyDistance', TType.DOUBLE, 9)
            oprot.writeDouble(self.safetyDistance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaskTemplate(object):
    """
    Attributes:
     - taskType
     - description
     - regionType
     - requiredTypes
     - maxSpeed

    """


    def __init__(self, taskType=None, description=None, regionType=None, requiredTypes=None, maxSpeed=None,):
        self.taskType = taskType
        self.description = description
        self.regionType = regionType
        self.requiredTypes = requiredTypes
        self.maxSpeed = maxSpeed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.taskType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.regionType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.requiredTypes = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readI32()
                        self.requiredTypes.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.maxSpeed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaskTemplate')
        if self.taskType is not None:
            oprot.writeFieldBegin('taskType', TType.I32, 1)
            oprot.writeI32(self.taskType)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.regionType is not None:
            oprot.writeFieldBegin('regionType', TType.I32, 3)
            oprot.writeI32(self.regionType)
            oprot.writeFieldEnd()
        if self.requiredTypes is not None:
            oprot.writeFieldBegin('requiredTypes', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.requiredTypes))
            for iter27 in self.requiredTypes:
                oprot.writeI32(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxSpeed is not None:
            oprot.writeFieldBegin('maxSpeed', TType.DOUBLE, 5)
            oprot.writeDouble(self.maxSpeed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Task(object):
    """
    Attributes:
     - taskTemplate
     - id
     - missionId
     - area
     - speed
     - altitude
     - range
     - timeLapse
     - bearing
     - startTime
     - endTime
     - taskStatus
     - assignedVehicleId
     - parentTaskId
     - partfields
     - treatmentGrids

    """


    def __init__(self, taskTemplate=None, id=None, missionId=None, area=None, speed=None, altitude=None, range=None, timeLapse=None, bearing=None, startTime=None, endTime=None, taskStatus=None, assignedVehicleId=None, parentTaskId=None, partfields=None, treatmentGrids=None,):
        self.taskTemplate = taskTemplate
        self.id = id
        self.missionId = missionId
        self.area = area
        self.speed = speed
        self.altitude = altitude
        self.range = range
        self.timeLapse = timeLapse
        self.bearing = bearing
        self.startTime = startTime
        self.endTime = endTime
        self.taskStatus = taskStatus
        self.assignedVehicleId = assignedVehicleId
        self.parentTaskId = parentTaskId
        self.partfields = partfields
        self.treatmentGrids = treatmentGrids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.taskTemplate = TaskTemplate()
                    self.taskTemplate.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.area = Region()
                    self.area.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.altitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.range = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.timeLapse = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.bearing = Orientation()
                    self.bearing.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.taskStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.assignedVehicleId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.parentTaskId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.partfields = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = PartField()
                        _elem33.read(iprot)
                        self.partfields.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.treatmentGrids = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = TreatmentGrid()
                        _elem39.read(iprot)
                        self.treatmentGrids.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Task')
        if self.taskTemplate is not None:
            oprot.writeFieldBegin('taskTemplate', TType.STRUCT, 1)
            self.taskTemplate.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 3)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.STRUCT, 4)
            self.area.write(oprot)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.DOUBLE, 5)
            oprot.writeDouble(self.speed)
            oprot.writeFieldEnd()
        if self.altitude is not None:
            oprot.writeFieldBegin('altitude', TType.DOUBLE, 6)
            oprot.writeDouble(self.altitude)
            oprot.writeFieldEnd()
        if self.range is not None:
            oprot.writeFieldBegin('range', TType.DOUBLE, 7)
            oprot.writeDouble(self.range)
            oprot.writeFieldEnd()
        if self.timeLapse is not None:
            oprot.writeFieldBegin('timeLapse', TType.I32, 8)
            oprot.writeI32(self.timeLapse)
            oprot.writeFieldEnd()
        if self.bearing is not None:
            oprot.writeFieldBegin('bearing', TType.STRUCT, 9)
            self.bearing.write(oprot)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 10)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 11)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.taskStatus is not None:
            oprot.writeFieldBegin('taskStatus', TType.I32, 12)
            oprot.writeI32(self.taskStatus)
            oprot.writeFieldEnd()
        if self.assignedVehicleId is not None:
            oprot.writeFieldBegin('assignedVehicleId', TType.I32, 13)
            oprot.writeI32(self.assignedVehicleId)
            oprot.writeFieldEnd()
        if self.parentTaskId is not None:
            oprot.writeFieldBegin('parentTaskId', TType.I32, 14)
            oprot.writeI32(self.parentTaskId)
            oprot.writeFieldEnd()
        if self.partfields is not None:
            oprot.writeFieldBegin('partfields', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.partfields))
            for iter40 in self.partfields:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.treatmentGrids is not None:
            oprot.writeFieldBegin('treatmentGrids', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.treatmentGrids))
            for iter41 in self.treatmentGrids:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Command(object):
    """
    Attributes:
     - relatedTask
     - id
     - commandType
     - startTime
     - endTime
     - commandStatus
     - params

    """


    def __init__(self, relatedTask=None, id=None, commandType=None, startTime=None, endTime=None, commandStatus=None, params=None,):
        self.relatedTask = relatedTask
        self.id = id
        self.commandType = commandType
        self.startTime = startTime
        self.endTime = endTime
        self.commandStatus = commandStatus
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.relatedTask = Task()
                    self.relatedTask.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.commandType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.commandStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readDouble()
                        self.params.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Command')
        if self.relatedTask is not None:
            oprot.writeFieldBegin('relatedTask', TType.STRUCT, 1)
            self.relatedTask.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.commandType is not None:
            oprot.writeFieldBegin('commandType', TType.I32, 3)
            oprot.writeI32(self.commandType)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 4)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 5)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.commandStatus is not None:
            oprot.writeFieldBegin('commandStatus', TType.I32, 6)
            oprot.writeI32(self.commandStatus)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.params))
            for iter48 in self.params:
                oprot.writeDouble(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MissionTag(object):
    """
    Attributes:
     - missionId
     - name

    """


    def __init__(self, missionId=None, name=None,):
        self.missionId = missionId
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MissionTag')
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 1)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Mission(object):
    """
    Attributes:
     - missionId
     - name
     - navigationArea
     - forbiddenArea
     - homeLocation
     - tasks
     - vehicles
     - commands

    """


    def __init__(self, missionId=None, name=None, navigationArea=None, forbiddenArea=None, homeLocation=None, tasks=None, vehicles=None, commands=None,):
        self.missionId = missionId
        self.name = name
        self.navigationArea = navigationArea
        self.forbiddenArea = forbiddenArea
        self.homeLocation = homeLocation
        self.tasks = tasks
        self.vehicles = vehicles
        self.commands = commands

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.navigationArea = Region()
                    self.navigationArea.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.forbiddenArea = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = Region()
                        _elem54.read(iprot)
                        self.forbiddenArea.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.homeLocation = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = Position()
                        _elem60.read(iprot)
                        self.homeLocation.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.tasks = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = Task()
                        _elem66.read(iprot)
                        self.tasks.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.vehicles = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = Vehicle()
                        _elem72.read(iprot)
                        self.vehicles.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.commands = []
                    (_etype76, _size73) = iprot.readListBegin()
                    for _i77 in range(_size73):
                        _elem78 = Command()
                        _elem78.read(iprot)
                        self.commands.append(_elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mission')
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 1)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.navigationArea is not None:
            oprot.writeFieldBegin('navigationArea', TType.STRUCT, 3)
            self.navigationArea.write(oprot)
            oprot.writeFieldEnd()
        if self.forbiddenArea is not None:
            oprot.writeFieldBegin('forbiddenArea', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.forbiddenArea))
            for iter79 in self.forbiddenArea:
                iter79.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.homeLocation is not None:
            oprot.writeFieldBegin('homeLocation', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.homeLocation))
            for iter80 in self.homeLocation:
                iter80.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tasks is not None:
            oprot.writeFieldBegin('tasks', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.tasks))
            for iter81 in self.tasks:
                iter81.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.vehicles is not None:
            oprot.writeFieldBegin('vehicles', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.vehicles))
            for iter82 in self.vehicles:
                iter82.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.commands is not None:
            oprot.writeFieldBegin('commands', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.commands))
            for iter83 in self.commands:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Alarm(object):
    """
    Attributes:
     - alarmId
     - vehicleId
     - missionId
     - alarmType
     - alarmCode
     - description
     - time

    """


    def __init__(self, alarmId=None, vehicleId=None, missionId=None, alarmType=None, alarmCode=None, description=None, time=None,):
        self.alarmId = alarmId
        self.vehicleId = vehicleId
        self.missionId = missionId
        self.alarmType = alarmType
        self.alarmCode = alarmCode
        self.description = description
        self.time = time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.alarmId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.vehicleId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.missionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.alarmType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.alarmCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Alarm')
        if self.alarmId is not None:
            oprot.writeFieldBegin('alarmId', TType.I32, 1)
            oprot.writeI32(self.alarmId)
            oprot.writeFieldEnd()
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.I32, 2)
            oprot.writeI32(self.vehicleId)
            oprot.writeFieldEnd()
        if self.missionId is not None:
            oprot.writeFieldBegin('missionId', TType.I32, 3)
            oprot.writeI32(self.missionId)
            oprot.writeFieldEnd()
        if self.alarmType is not None:
            oprot.writeFieldBegin('alarmType', TType.I32, 4)
            oprot.writeI32(self.alarmType)
            oprot.writeFieldEnd()
        if self.alarmCode is not None:
            oprot.writeFieldBegin('alarmCode', TType.I32, 5)
            oprot.writeI32(self.alarmCode)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 7)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PartField(object):
    """
    Attributes:
     - partfieldId
     - isoId
     - name
     - borderPoints

    """


    def __init__(self, partfieldId=None, isoId=None, name=None, borderPoints=None,):
        self.partfieldId = partfieldId
        self.isoId = isoId
        self.name = name
        self.borderPoints = borderPoints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.partfieldId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.isoId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.borderPoints = Region()
                    self.borderPoints.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PartField')
        if self.partfieldId is not None:
            oprot.writeFieldBegin('partfieldId', TType.I32, 1)
            oprot.writeI32(self.partfieldId)
            oprot.writeFieldEnd()
        if self.isoId is not None:
            oprot.writeFieldBegin('isoId', TType.STRING, 2)
            oprot.writeString(self.isoId.encode('utf-8') if sys.version_info[0] == 2 else self.isoId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.borderPoints is not None:
            oprot.writeFieldBegin('borderPoints', TType.STRUCT, 4)
            self.borderPoints.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TreatmentGrid(object):
    """
    Attributes:
     - Id
     - partfieldId
     - taskId
     - numRows
     - numCols
     - treatmentValue

    """


    def __init__(self, Id=None, partfieldId=None, taskId=None, numRows=None, numCols=None, treatmentValue=None,):
        self.Id = Id
        self.partfieldId = partfieldId
        self.taskId = taskId
        self.numRows = numRows
        self.numCols = numCols
        self.treatmentValue = treatmentValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.partfieldId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.taskId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.numRows = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numCols = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.treatmentValue = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = iprot.readDouble()
                        self.treatmentValue.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TreatmentGrid')
        if self.Id is not None:
            oprot.writeFieldBegin('Id', TType.I32, 1)
            oprot.writeI32(self.Id)
            oprot.writeFieldEnd()
        if self.partfieldId is not None:
            oprot.writeFieldBegin('partfieldId', TType.I32, 2)
            oprot.writeI32(self.partfieldId)
            oprot.writeFieldEnd()
        if self.taskId is not None:
            oprot.writeFieldBegin('taskId', TType.I32, 3)
            oprot.writeI32(self.taskId)
            oprot.writeFieldEnd()
        if self.numRows is not None:
            oprot.writeFieldBegin('numRows', TType.I32, 4)
            oprot.writeI32(self.numRows)
            oprot.writeFieldEnd()
        if self.numCols is not None:
            oprot.writeFieldBegin('numCols', TType.I32, 5)
            oprot.writeI32(self.numCols)
            oprot.writeFieldEnd()
        if self.treatmentValue is not None:
            oprot.writeFieldBegin('treatmentValue', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.treatmentValue))
            for iter90 in self.treatmentValue:
                oprot.writeDouble(iter90)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Position)
Position.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'longitude', None, None, ),  # 1
    (2, TType.DOUBLE, 'latitude', None, None, ),  # 2
    (3, TType.DOUBLE, 'altitude', None, None, ),  # 3
)
all_structs.append(Orientation)
Orientation.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'roll', None, None, ),  # 1
    (2, TType.DOUBLE, 'pitch', None, None, ),  # 2
    (3, TType.DOUBLE, 'yaw', None, None, ),  # 3
)
all_structs.append(Region)
Region.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'area', (TType.STRUCT, [Position, None], False), None, ),  # 1
)
all_structs.append(DetectionRegion)
DetectionRegion.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Id', None, None, ),  # 1
    (2, TType.I64, 'time', None, None, ),  # 2
    (3, TType.STRUCT, 'location', [Region, None], None, ),  # 3
    (4, TType.STRING, 'label', 'UTF8', None, ),  # 4
)
all_structs.append(Battery)
Battery.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'batteryCapacity', None, None, ),  # 1
    (2, TType.DOUBLE, 'batteryPercentage', None, None, ),  # 2
)
all_structs.append(StateVector)
StateVector.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'vehicleId', None, None, ),  # 1
    (2, TType.STRUCT, 'position', [Position, None], None, ),  # 2
    (3, TType.STRUCT, 'orientation', [Orientation, None], None, ),  # 3
    (4, TType.DOUBLE, 'gimbalPitch', None, None, ),  # 4
    (5, TType.STRUCT, 'battery', [Battery, None], None, ),  # 5
    (6, TType.DOUBLE, 'linearSpeed', None, None, ),  # 6
    (7, TType.I64, 'lastUpdate', None, None, ),  # 7
)
all_structs.append(Equipment)
Equipment.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRING, 'isoId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
)
all_structs.append(Vehicle)
Vehicle.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.DOUBLE, 'maxSpeed', None, None, ),  # 4
    (5, TType.I32, 'maxRunningTime', None, None, ),  # 5
    (6, TType.LIST, 'equipments', (TType.STRUCT, [Equipment, None], False), None, ),  # 6
    (7, TType.LIST, 'capabilities', (TType.I32, None, False), None, ),  # 7
    (8, TType.STRUCT, 'stateVector', [StateVector, None], None, ),  # 8
    (9, TType.DOUBLE, 'safetyDistance', None, None, ),  # 9
)
all_structs.append(TaskTemplate)
TaskTemplate.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'taskType', None, None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    (3, TType.I32, 'regionType', None, None, ),  # 3
    (4, TType.LIST, 'requiredTypes', (TType.I32, None, False), None, ),  # 4
    (5, TType.DOUBLE, 'maxSpeed', None, None, ),  # 5
)
all_structs.append(Task)
Task.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'taskTemplate', [TaskTemplate, None], None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.I32, 'missionId', None, None, ),  # 3
    (4, TType.STRUCT, 'area', [Region, None], None, ),  # 4
    (5, TType.DOUBLE, 'speed', None, None, ),  # 5
    (6, TType.DOUBLE, 'altitude', None, None, ),  # 6
    (7, TType.DOUBLE, 'range', None, None, ),  # 7
    (8, TType.I32, 'timeLapse', None, None, ),  # 8
    (9, TType.STRUCT, 'bearing', [Orientation, None], None, ),  # 9
    (10, TType.I64, 'startTime', None, None, ),  # 10
    (11, TType.I64, 'endTime', None, None, ),  # 11
    (12, TType.I32, 'taskStatus', None, None, ),  # 12
    (13, TType.I32, 'assignedVehicleId', None, None, ),  # 13
    (14, TType.I32, 'parentTaskId', None, None, ),  # 14
    (15, TType.LIST, 'partfields', (TType.STRUCT, [PartField, None], False), None, ),  # 15
    (16, TType.LIST, 'treatmentGrids', (TType.STRUCT, [TreatmentGrid, None], False), None, ),  # 16
)
all_structs.append(Command)
Command.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'relatedTask', [Task, None], None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.I32, 'commandType', None, None, ),  # 3
    (4, TType.I64, 'startTime', None, None, ),  # 4
    (5, TType.I64, 'endTime', None, None, ),  # 5
    (6, TType.I32, 'commandStatus', None, None, ),  # 6
    (7, TType.LIST, 'params', (TType.DOUBLE, None, False), None, ),  # 7
)
all_structs.append(MissionTag)
MissionTag.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'missionId', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(Mission)
Mission.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'missionId', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'navigationArea', [Region, None], None, ),  # 3
    (4, TType.LIST, 'forbiddenArea', (TType.STRUCT, [Region, None], False), None, ),  # 4
    (5, TType.LIST, 'homeLocation', (TType.STRUCT, [Position, None], False), None, ),  # 5
    (6, TType.LIST, 'tasks', (TType.STRUCT, [Task, None], False), None, ),  # 6
    (7, TType.LIST, 'vehicles', (TType.STRUCT, [Vehicle, None], False), None, ),  # 7
    (8, TType.LIST, 'commands', (TType.STRUCT, [Command, None], False), None, ),  # 8
)
all_structs.append(Alarm)
Alarm.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'alarmId', None, None, ),  # 1
    (2, TType.I32, 'vehicleId', None, None, ),  # 2
    (3, TType.I32, 'missionId', None, None, ),  # 3
    (4, TType.I32, 'alarmType', None, None, ),  # 4
    (5, TType.I32, 'alarmCode', None, None, ),  # 5
    (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    (7, TType.I64, 'time', None, None, ),  # 7
)
all_structs.append(PartField)
PartField.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'partfieldId', None, None, ),  # 1
    (2, TType.STRING, 'isoId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'borderPoints', [Region, None], None, ),  # 4
)
all_structs.append(TreatmentGrid)
TreatmentGrid.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Id', None, None, ),  # 1
    (2, TType.I32, 'partfieldId', None, None, ),  # 2
    (3, TType.I32, 'taskId', None, None, ),  # 3
    (4, TType.I32, 'numRows', None, None, ),  # 4
    (5, TType.I32, 'numCols', None, None, ),  # 5
    (6, TType.LIST, 'treatmentValue', (TType.DOUBLE, None, False), None, ),  # 6
)
fix_spec(all_structs)
del all_structs
