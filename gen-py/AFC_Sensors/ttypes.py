#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import AFC_Types.ttypes

from thrift.transport import TTransport
all_structs = []


class SensorType(object):
    grass = 0
    flow_meter = 1
    soil = 2
    environmental = 3
    asset_tracking = 4
    silage = 5
    collar = 6

    _VALUES_TO_NAMES = {
        0: "grass",
        1: "flow_meter",
        2: "soil",
        3: "environmental",
        4: "asset_tracking",
        5: "silage",
        6: "collar",
    }

    _NAMES_TO_VALUES = {
        "grass": 0,
        "flow_meter": 1,
        "soil": 2,
        "environmental": 3,
        "asset_tracking": 4,
        "silage": 5,
        "collar": 6,
    }


class ObservationType(object):
    air_humidity = 0
    air_pressure = 1
    air_temperature = 2
    altitude = 3
    battery = 4
    crude_protein = 5
    dry_matter = 6
    d_value = 7
    electrical_conductivity_bulk = 8
    electrical_conductivity_pores = 9
    fibre = 10
    latitude = 11
    longitude = 12
    protein = 13
    relative_dielectric_constant = 14
    soil_humidity = 15
    soil_matrix_potential = 16
    soil_temperature = 17
    solar_radiation = 18
    speed = 19
    temperature_teros12 = 20
    temperature_teros21 = 21
    volumetric_water_content_mineral_soil = 22
    water_consumption = 23

    _VALUES_TO_NAMES = {
        0: "air_humidity",
        1: "air_pressure",
        2: "air_temperature",
        3: "altitude",
        4: "battery",
        5: "crude_protein",
        6: "dry_matter",
        7: "d_value",
        8: "electrical_conductivity_bulk",
        9: "electrical_conductivity_pores",
        10: "fibre",
        11: "latitude",
        12: "longitude",
        13: "protein",
        14: "relative_dielectric_constant",
        15: "soil_humidity",
        16: "soil_matrix_potential",
        17: "soil_temperature",
        18: "solar_radiation",
        19: "speed",
        20: "temperature_teros12",
        21: "temperature_teros21",
        22: "volumetric_water_content_mineral_soil",
        23: "water_consumption",
    }

    _NAMES_TO_VALUES = {
        "air_humidity": 0,
        "air_pressure": 1,
        "air_temperature": 2,
        "altitude": 3,
        "battery": 4,
        "crude_protein": 5,
        "dry_matter": 6,
        "d_value": 7,
        "electrical_conductivity_bulk": 8,
        "electrical_conductivity_pores": 9,
        "fibre": 10,
        "latitude": 11,
        "longitude": 12,
        "protein": 13,
        "relative_dielectric_constant": 14,
        "soil_humidity": 15,
        "soil_matrix_potential": 16,
        "soil_temperature": 17,
        "solar_radiation": 18,
        "speed": 19,
        "temperature_teros12": 20,
        "temperature_teros21": 21,
        "volumetric_water_content_mineral_soil": 22,
        "water_consumption": 23,
    }


class SensorData(object):
    """
    Attributes:
     - sensorUid
     - sensorType
     - obserType
     - unit
     - value
     - sensorPosition
     - lastUpdate

    """


    def __init__(self, sensorUid=None, sensorType=None, obserType=None, unit=None, value=None, sensorPosition=None, lastUpdate=None,):
        self.sensorUid = sensorUid
        self.sensorType = sensorType
        self.obserType = obserType
        self.unit = unit
        self.value = value
        self.sensorPosition = sensorPosition
        self.lastUpdate = lastUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sensorUid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sensorType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.obserType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.unit = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.sensorPosition = AFC_Types.ttypes.Position()
                    self.sensorPosition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.lastUpdate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorData')
        if self.sensorUid is not None:
            oprot.writeFieldBegin('sensorUid', TType.STRING, 1)
            oprot.writeString(self.sensorUid.encode('utf-8') if sys.version_info[0] == 2 else self.sensorUid)
            oprot.writeFieldEnd()
        if self.sensorType is not None:
            oprot.writeFieldBegin('sensorType', TType.I32, 2)
            oprot.writeI32(self.sensorType)
            oprot.writeFieldEnd()
        if self.obserType is not None:
            oprot.writeFieldBegin('obserType', TType.I32, 3)
            oprot.writeI32(self.obserType)
            oprot.writeFieldEnd()
        if self.unit is not None:
            oprot.writeFieldBegin('unit', TType.STRING, 4)
            oprot.writeString(self.unit.encode('utf-8') if sys.version_info[0] == 2 else self.unit)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 5)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        if self.sensorPosition is not None:
            oprot.writeFieldBegin('sensorPosition', TType.STRUCT, 6)
            self.sensorPosition.write(oprot)
            oprot.writeFieldEnd()
        if self.lastUpdate is not None:
            oprot.writeFieldBegin('lastUpdate', TType.I64, 7)
            oprot.writeI64(self.lastUpdate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CollarData(object):
    """
    Attributes:
     - collarUid
     - collarPosition
     - temperature
     - resourceAlarm
     - locationAnomaly
     - temperatureAnomaly
     - distanceAnomaly
     - positionAnomaly
     - lastUpdate

    """


    def __init__(self, collarUid=None, collarPosition=None, temperature=None, resourceAlarm=None, locationAnomaly=None, temperatureAnomaly=None, distanceAnomaly=None, positionAnomaly=None, lastUpdate=None,):
        self.collarUid = collarUid
        self.collarPosition = collarPosition
        self.temperature = temperature
        self.resourceAlarm = resourceAlarm
        self.locationAnomaly = locationAnomaly
        self.temperatureAnomaly = temperatureAnomaly
        self.distanceAnomaly = distanceAnomaly
        self.positionAnomaly = positionAnomaly
        self.lastUpdate = lastUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.collarUid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.collarPosition = AFC_Types.ttypes.Position()
                    self.collarPosition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.temperature = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.resourceAlarm = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.locationAnomaly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.temperatureAnomaly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.distanceAnomaly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.positionAnomaly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.lastUpdate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CollarData')
        if self.collarUid is not None:
            oprot.writeFieldBegin('collarUid', TType.STRING, 1)
            oprot.writeString(self.collarUid.encode('utf-8') if sys.version_info[0] == 2 else self.collarUid)
            oprot.writeFieldEnd()
        if self.collarPosition is not None:
            oprot.writeFieldBegin('collarPosition', TType.STRUCT, 2)
            self.collarPosition.write(oprot)
            oprot.writeFieldEnd()
        if self.temperature is not None:
            oprot.writeFieldBegin('temperature', TType.DOUBLE, 3)
            oprot.writeDouble(self.temperature)
            oprot.writeFieldEnd()
        if self.resourceAlarm is not None:
            oprot.writeFieldBegin('resourceAlarm', TType.BOOL, 4)
            oprot.writeBool(self.resourceAlarm)
            oprot.writeFieldEnd()
        if self.locationAnomaly is not None:
            oprot.writeFieldBegin('locationAnomaly', TType.BOOL, 5)
            oprot.writeBool(self.locationAnomaly)
            oprot.writeFieldEnd()
        if self.temperatureAnomaly is not None:
            oprot.writeFieldBegin('temperatureAnomaly', TType.BOOL, 6)
            oprot.writeBool(self.temperatureAnomaly)
            oprot.writeFieldEnd()
        if self.distanceAnomaly is not None:
            oprot.writeFieldBegin('distanceAnomaly', TType.BOOL, 7)
            oprot.writeBool(self.distanceAnomaly)
            oprot.writeFieldEnd()
        if self.positionAnomaly is not None:
            oprot.writeFieldBegin('positionAnomaly', TType.BOOL, 8)
            oprot.writeBool(self.positionAnomaly)
            oprot.writeFieldEnd()
        if self.lastUpdate is not None:
            oprot.writeFieldBegin('lastUpdate', TType.I64, 9)
            oprot.writeI64(self.lastUpdate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SensorData)
SensorData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sensorUid', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sensorType', None, None, ),  # 2
    (3, TType.I32, 'obserType', None, None, ),  # 3
    (4, TType.STRING, 'unit', 'UTF8', None, ),  # 4
    (5, TType.DOUBLE, 'value', None, None, ),  # 5
    (6, TType.STRUCT, 'sensorPosition', [AFC_Types.ttypes.Position, None], None, ),  # 6
    (7, TType.I64, 'lastUpdate', None, None, ),  # 7
)
all_structs.append(CollarData)
CollarData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'collarUid', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'collarPosition', [AFC_Types.ttypes.Position, None], None, ),  # 2
    (3, TType.DOUBLE, 'temperature', None, None, ),  # 3
    (4, TType.BOOL, 'resourceAlarm', None, None, ),  # 4
    (5, TType.BOOL, 'locationAnomaly', None, None, ),  # 5
    (6, TType.BOOL, 'temperatureAnomaly', None, None, ),  # 6
    (7, TType.BOOL, 'distanceAnomaly', None, None, ),  # 7
    (8, TType.BOOL, 'positionAnomaly', None, None, ),  # 8
    (9, TType.I64, 'lastUpdate', None, None, ),  # 9
)
fix_spec(all_structs)
del all_structs
